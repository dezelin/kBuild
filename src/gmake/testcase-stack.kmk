# $Id: $
## @file
#
# kBuild - testcase for the functions.
#
# Copyright (c) 2006 knut st. osmundsen <bird-kbuild-src@anduin.net>
#
#
# This file is part of kLdr.
#
# kLdr is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kLdr is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kLdr; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

DEPTH = ../..
include $(PATH_KBUILD)/header.kmk

ifneq ($(not 1),)
 $(error The 'not' function is missing)
endif
ifneq ($(eq 1,1),1)
 $(error The 'eq' function is missing)
endif

ASSERT1 = $(if $(not $(eq $(STACK1),$(1))),$(error failure: STACK1:='$(STACK1)' expected='$(1)'))
$(call stack-push,STACK1,1)
$(call ASSERT,1)
$(call stack-push,STACK1,2)
$(call ASSERT,1 2)
$(call stack-push,STACK1,3)
$(call ASSERT,1 2 3)
$(call stack-push,STACK1,4)
$(call ASSERT,1 2 3 4)
$(call stack-push,STACK1,5)
$(call ASSERT,1 2 3 4 5)
$(call stack-popv,STACK1)
$(call ASSERT,1 2 3 4)
$(call stack-push,STACK1,5)
$(call ASSERT,1 2 3 4 5)
$(call stack-popv,STACK1)
$(call ASSERT,1 2 3 4)
$(call stack-popv,STACK1)
$(call ASSERT,1 2 3)
$(call stack-push,STACK1,4)
$(call ASSERT,1 2 3 4)
$(call stack-push,STACK1,5)
$(call ASSERT,1 2 3 4 5)
top := $(call stack-top,STACK1)
$(if $(not $(eq $(top),5)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='5'))
$(call ASSERT,1 2 3 4 5)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),5)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='5'))
$(call ASSERT,1 2 3 4)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),4)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='4'))
$(call ASSERT,1 2 3)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),3)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='3'))
$(call ASSERT,1 2)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),2)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='2'))
$(call ASSERT,1)
top := $(call stack-top,STACK1)
$(if $(not $(eq $(top),1)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='1'))
$(call ASSERT,1)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),1)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected='1'))
$(call ASSERT,)
top := $(call stack-pop,STACK1)
$(if $(not $(eq $(top),)),$(error failure STACK1:='$(STACK1)' top:='$(top)' expected=''))
$(call ASSERT,)

all_recursive:
	$(ECHO) The stack works.$(STACK1)
